{"version":3,"sources":["components/AboutText.js","actions/index.js","components/MessageForm.js","components/Messages.js","components/MessageList.js","components/MessagesPage.js","components/App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["AboutText","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","aboutTitle","react_default","a","createElement","aboutText","React","Component","clearMessages","type","addMessage","message","payload","MessageForm","_this","call","handleSubmit","bind","assertThisInitialized","event","preventDefault","newMessage","target","text","toString","link","console","log","sendMessageWithPOST","JSON","stringify","props","update","_this2","fetch","method","then","response","json","data","_this3","headers","Content-Type","body","_this4","className","onSubmit","ref","input","inputField","name","defaultValue","onFocus","default","onClick","connect","state","messages","Messages","messagesToDisplay","messageList","length","numberOfMessages","_loop","messageObject","i","linkUrl","linkTo","createLink","moveMessages","push","behaviour","window","open","MessageList","Accept","callAPI","document","getElementById","header","id","getLinkedMessages","Messages_Messages","scrollingMessages","MessagesPage","numberOfMessagesDisplayed","rerenderMessageList","_collapseMessages","_expandMessages","_toggleScroll","setState","scrollButton","expandCollapseButton","components_MessageForm","components_MessageList","App","_updateHomePage","isHomePage","_updateAboutPage","entered","customHeader","components_AboutText","MessagesPage_MessagesPage","enterSite","renderPage","renderWelcome","Boolean","location","hostname","match","defaults","combineReducers","undefined","action","concat","ReactDOM","render","es","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAqCeA,EAlCf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGQ,IAAMC,EAAaC,EAAAC,EAAAC,cAAA,6BACbC,EACFH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oIAA2HF,EAAAC,EAAAC,cAAA,uDAA3H,oMACqMF,EAAAC,EAAAC,cAAA,WAE7LF,EAAAC,EAAAC,cAAA,uDAHR,KAG2DF,EAAAC,EAAAC,cAAA,WAH3D,6BAIkCF,EAAAC,EAAAC,cAAA,0BAJlC,SAI4DF,EAAAC,EAAAC,cAAA,6BAJ5D,cAKoBF,EAAAC,EAAAC,cAAA,gBALpB,wJAMqEF,EAAAC,EAAAC,cAAA,WAE7DF,EAAAC,EAAAC,cAAA,+CAAyCF,EAAAC,EAAAC,cAAA,WARjD,sFAS2FF,EAAAC,EAAAC,cAAA,WAEnFF,EAAAC,EAAAC,cAAA,qCAA+BF,EAAAC,EAAAC,cAAA,WAXvC,mFAYwFF,EAAAC,EAAAC,cAAA,WAEhFF,EAAAC,EAAAC,cAAA,6EAAuEF,EAAAC,EAAAC,cAAA,WAd/E,qPAe0PF,EAAAC,EAAAC,cAAA,aAIlQ,OAAQF,EAAAC,EAAAC,cAAA,WACHH,EACAI,OA3BbjB,EAAA,CAA+BkB,IAAMC,kBCHxBC,EAAe,WAExB,MAAO,CACHC,KAAM,mBAIDC,EAAa,SAACC,GAEvB,MAAO,CACHF,KAAM,cACNG,QAASD,ICPXE,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACVC,EAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAE,KAAAvB,QACKwB,aAAeF,EAAKE,aAAaC,KAAlB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IAFVA,4EAKDK,GACTA,EAAMC,iBACN,IAAIC,EAAaF,EAAMG,OAAOC,KAAKvB,MAAMwB,WACrCC,EAAON,EAAMG,OAAOG,KAAKzB,MAAMwB,WACtB,YAATC,IACAA,EAAO,MAEXC,QAAQC,IAAIF,GACZjC,KAAKoC,oBAAoBC,KAAKC,UAAU,CAACnB,QACrCU,EACAI,KAAOA,sCAIXjC,KAAKuC,MAAMC,iDAGC,IAAAC,EAAAzC,KAMZ0C,MAAM,0CAJU,CACZC,OAAQ,WAG8CC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GAC7FN,EAAKF,MAAMvB,gBACXkB,QAAQC,IAAIY,iDAIAlB,GAAY,IAAAmB,EAAAhD,KAShC0C,MAAM,iCARU,CACZC,OAAQ,OACRM,QAAS,CACLC,eAAgB,oBAEpBC,KAAMtB,IAGuCe,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GACpFC,EAAKT,MAAMrB,WAAW,CAClBC,QAAU4B,EAAK5B,QACfc,KAAOc,EAAKd,0CAKX,IAAAmB,EAAApD,KACL,OACIU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMyC,UAAU,mBAAmBC,SAAUtD,KAAKwB,cAC9Cd,EAAAC,EAAAC,cAAA,SAAOyC,UAAU,eAEb3C,EAAAC,EAAAC,cAAA,SAAOyC,UAAU,cAAcE,IAAK,SAAAC,GAAK,OAAIJ,EAAKK,WAAaD,GAAOE,KAAK,OAAOzC,KAAK,OAAO0C,aAAa,yBAAyBC,QAAS,kBAAMR,EAAKK,WAAWjD,MAAQ,OAE/KE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQyC,UAAU,cAAcK,KAAK,QACrChD,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,UAAUqD,SAAO,GAA/B,2BAChBnD,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,SAASqD,SAAO,GAA9B,UACAnD,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,WAAd,WACAE,EAAAC,EAAAC,cAAA,UAAQJ,MAAM,mBAAd,oBAEgBE,EAAAC,EAAAC,cAAA,SAAOyC,UAAU,qCAAqCpC,KAAK,SAAST,MAAM,WAC1EE,EAAAC,EAAAC,cAAA,SAAOK,KAAK,QAAQoC,UAAU,qCAAqC7C,MAAM,gBAE7EE,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,gBACX3C,EAAAC,EAAAC,cAAA,UAAQyC,UAAU,qCAAqCS,QAAS,kBAAMV,EAAKpC,kBAA3E,8BAvEMF,IAAMC,WAsFjBgD,cANS,SAACC,GACrB,MAAO,CACHC,SAAUD,EAAMC,WAIgB,CAAE/C,aAAYF,iBAAvC+C,CAAwD1C,GCvFlD6C,mLAET,IAEAC,EAFA7C,EAAAtB,KACAoE,EAAc,GAQlB,GALID,EADAnE,KAAKuC,MAAM0B,SAASI,OAASrE,KAAKuC,MAAM+B,iBACpBtE,KAAKuC,MAAM0B,SAASI,OAEpBrE,KAAKuC,MAAM+B,iBAG/BtE,KAAKuC,MAAM0B,SAASI,OAAS,EACjC,IADmC,IAAAE,EAAA,WAE/B,IAAIC,EAAgBlD,EAAKiB,MAAM0B,SAASQ,GACpCtD,EAAUqD,EAAcrD,QAExBuD,EAiBhB,SAAoBvD,EAASwD,GACzB,GAAe,WAAXA,EACA,MAAO,yBAAgCxD,EAAQa,WAC5C,GAAe,YAAX2C,EACP,MAAO,gDAAkDxD,EAAQa,WAC9D,GAAe,oBAAX2C,EACP,MAAO,mDAAqDxD,EAAQa,WAvBlD4C,CAAWzD,EADdqD,EAAcvC,KAAMuC,EAAcvC,KAAKD,WAAY,MAE1DV,EAAKiB,MAAMsC,aACXT,EAAYU,KAAKpE,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,eAC9B9C,IAAKkE,GACL/D,EAAAC,EAAAC,cAAA,WAASmE,UAAU,YAAYjB,QAAS,WAA+D,OAAxDkB,OAAOC,KAAKP,EAAS,QAAS,yBAAiC,IAA9G,IAAyHvD,EAAzH,OAGDiD,EAAYU,KAAKpE,EAAAC,EAAAC,cAAA,MAAIL,IAAMkE,EAAGpB,UAAW,eAAeS,QAAS,WAAgE,OAAzDkB,OAAOC,KAAK,CAACP,WAAU,QAAS,yBAAgC,IAAvH,IAAkIvD,EAAlI,OAXhBsD,EAAG,EAAGA,EAAGN,EAAmBM,IAAIF,IAgBzC,OAAOH,SA5BuBtD,IAAMC,eCEtCmE,oLAEQ,IAAA5D,EAAAtB,KAEN0C,MAAM,iCAAkC,CACpCO,QAAS,CACLC,eAAe,mBACfiC,OAAS,sBAEdvC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GACtC,IAAK,IAAI0B,EAAI1B,EAAKsB,OAAO,EAAGI,GAAI,EAAGA,IAAI,CACnC,IAAIxC,EAAOc,EAAK0B,GAAGxC,KAAOc,EAAK0B,GAAGxC,KAAKD,WAAY,KACnDV,EAAKiB,MAAMrB,WAAY,CAACC,QAAU4B,EAAK0B,GAAGtD,QAAQa,WAClDC,KAAOA,oDAMfjC,KAAKoF,sDAGU,IAAA3C,EAAAzC,KACfqF,SAASC,eAAe,oBAAoB9E,MAAM,WAClDkC,MAAM,2CAA4C,CAC9CO,QAAS,CACLC,eAAe,mBACfiC,OAAS,sBAEdvC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAG,GACtCb,QAAQC,IAAIY,GACZN,EAAKF,MAAMvB,gBACX,IAAK,IAAIyD,EAAI1B,EAAKsB,OAAO,EAAGI,GAAI,EAAGA,IAC/BhC,EAAKF,MAAMrB,WAAY,CAACC,QAAU4B,EAAK0B,GAAGtD,QAAQa,WAClDC,KAAOc,EAAK0B,GAAGxC,KAAKD,gDAKvB,IAAAgB,EAAAhD,KACCuF,EAAU7E,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,qBAAd,gBAChB,OAAQ3C,EAAAC,EAAAC,cAAA,WACH2E,EACD7E,EAAAC,EAAAC,cAAA,UAAQ4E,GAAG,mBAAmBnC,UAAU,2BAA2BS,QAAS,kBAAMd,EAAKyC,sBAAvF,iCACA/E,EAAAC,EAAAC,cAAA,MAAIyC,UAAW,gBACX3C,EAAAC,EAAAC,cAAC8E,EAAD,CAAUzB,SAAUjE,KAAKuC,MAAM0B,SAAUK,iBAAkBtE,KAAKuC,MAAM+B,iBAAkBO,aAAc7E,KAAKuC,MAAMoD,6BA7CvG7E,IAAMC,WAyDjBgD,cANS,SAACC,GACrB,MAAO,CACHC,SAAUD,EAAMC,WAIgB,CAAE/C,aAAYF,iBAAvC+C,CAAwDmB,GC1DlDU,cAEjB,SAAAA,IAAc,IAAAtE,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACVtE,EAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAArE,KAAAvB,QACKgE,MAAQ,CACT6B,0BAA2B,GAC3BF,mBAAmB,EACnBG,qBAAqB,GAEzBxE,EAAKyE,kBAAoBzE,EAAKyE,kBAAkBtE,KAAvB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IACzBA,EAAK0E,gBAAkB1E,EAAK0E,gBAAgBvE,KAArB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IACvBA,EAAK2E,cAAgB3E,EAAK2E,cAAcxE,KAAnB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IATXA,qFAaV,IAAI0C,EAAQhE,KAAKgE,MAAM8B,oBACvB9F,KAAKkG,SAAS,CAACJ,qBAAsB9B,IACrC9B,QAAQC,IAAI,oDAIZnC,KAAKkG,SAAS,CAAEL,0BAA2B,+CAI3C7F,KAAKkG,SAAS,CAAEL,0BAA2B,6CAIvC7F,KAAKgE,MAAM2B,kBACf3F,KAAKkG,SAAS,CAAEP,mBAAmB,IAE/B3F,KAAKkG,SAAS,CAAEP,mBAAmB,qCAIlC,IACDQ,EAUAC,EAXC3D,EAAAzC,KAkBL,OAdImG,EADAnG,KAAKgE,MAAM2B,kBACKjF,EAAAC,EAAAC,cAAA,UAAQ4E,GAAG,gBAAgBnC,UAAU,2BAA2BS,QAAS9D,KAAKiG,eAA9E,gBAGAvF,EAAAC,EAAAC,cAAA,UAAQ4E,GAAG,gBAAgBnC,UAAU,2BAA2BS,QAAS9D,KAAKiG,eAA9E,kBAMhBG,EADyC,KAAzCpG,KAAKgE,MAAM6B,0BACanF,EAAAC,EAAAC,cAAA,UAAQ4E,GAAG,gBAAgBnC,UAAU,2BAA2BS,QAAS9D,KAAKgG,iBAA9E,WAEAtF,EAAAC,EAAAC,cAAA,UAAQ4E,GAAG,kBAAkBnC,UAAU,2BAA2BS,QAAS9D,KAAK+F,mBAAhF,aAGpBrF,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACyF,EAAD,CAAa7D,OAAQ,kBAAMC,EAAKqD,yBAChCpF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0F,EAAD,CAAa9D,OAAQ,kBAAMC,EAAKqD,uBAAuBxB,iBAAkBtE,KAAKgE,MAAM6B,0BAA2BF,kBAAmB3F,KAAKgE,MAAM2B,oBAC7IjF,EAAAC,EAAAC,cAAA,WACKuF,EACAC,WA5DyBtF,IAAMC,WCC3BwF,qBAEjB,SAAAA,EAAYhE,GAAO,IAAAjB,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAuG,IACfjF,EAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyG,GAAAhF,KAAAvB,KAAMuC,KAOViE,gBAAkB,WACdlF,EAAK4E,SAAS,CAAEO,YAAY,KATbnF,EAYnBoF,iBAAmB,WACfpF,EAAK4E,SAAS,CAAEO,YAAY,KAX5BnF,EAAK0C,MAAQ,CAAEyC,YAAY,EAC3BE,SAAS,GACTrF,EAAKkF,gBAAkBlF,EAAKkF,gBAAgB/E,KAArB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IACvBA,EAAKoF,iBAAmBpF,EAAKoF,iBAAiBjF,KAAtB3B,OAAA4B,EAAA,EAAA5B,CAAAwB,IALTA,4EAiBf,IAWI6B,EAXAyD,EACAlG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASoC,UAAU,2BAA2BS,QAAS9D,KAAKwG,iBAAzE,QAAN,IAA8G9F,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASoC,UAAU,2BAA4BS,QAAS9D,KAAK0G,kBAA1E,YAGtHhG,EAAAC,EAAAC,cAAA,YAqBR,OAbQuC,EAFJnD,KAAKgE,QACyB,IAA1BhE,KAAKgE,MAAMyC,WACH/F,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACiG,EAAD,OAQTnG,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACkG,EAAD,OAKJpG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WAAMgG,GACNlG,EAAAC,EAAAC,cAAA,WAAMuC,4CAOH,IAAAV,EAAAzC,KACX,OAAQU,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,oBACnB3C,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,eACf3C,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,iBAAd,2BACA3C,EAAAC,EAAAC,cAAA,MAAIyC,UAAU,gBAAd,sIACA3C,EAAAC,EAAAC,cAAA,UAAQyC,UAAU,eAAeS,QAAS,kBAAMrB,EAAKsE,cAArD,+CAMJ/G,KAAKkG,SAAS,CAACS,SAAQ,qCAIvB,OAA2B,IAAvB3G,KAAKgE,MAAM2C,QACJjG,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,aAAarD,KAAKgH,cAEjCtG,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,aAAarD,KAAKiH,wBA3EnBnG,IAAMC,YCOnBmG,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,sEChBFC,EAAW,GAaAC,cAAgB,CAC3BtD,SAZoB,WAAgC,IAA/BA,EAA+B7D,UAAAiE,OAAA,QAAAmD,IAAApH,UAAA,GAAAA,UAAA,GAArBkH,EAAUG,EAAWrH,UAAAiE,OAAA,EAAAjE,UAAA,QAAAoH,EACpD,MAAoB,mBAAhBC,EAAOxG,KACA,GACgB,gBAAhBwG,EAAOxG,KACC,CAACwG,EAAOrG,SACPsG,OAAOzD,GAEpBA,KCFX0D,IAASC,OACJlH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAUC,MAAOC,YAAYC,EAAUhD,OAAOiD,8BAAgCjD,OAAOiD,iCAClFvH,EAAAC,EAAAC,cAACsH,EAAD,OAEJ7C,SAASC,eAAe,SFoHtB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MAAMzF,KAAK,SAAA0F,GACjCA,EAAaC","file":"static/js/main.28b04d35.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport class AboutText extends React.Component {\r\n\r\n    render() {\r\n        const aboutTitle = <h2>About This Page</h2>;\r\n        const aboutText = (\r\n            <div>\r\n                <p>These webpages were created by Martin Palanca, a 4th Year BCS Computer Science student, as part of Assignment 1 for the <i>CPSC436I (Introduction to Industry Skills)</i>\r\n                    course at the University of British Columbia. The technology stack for this application includes React JS, React-Redux, and Node/Express. The primary functionality of this site allows users to:<br></br>\r\n                \r\n                        <b>1) Add custom messages into a Message Log </b>. <br></br>\r\n                        Messages are ordered from <i>top to bottom</i> from <i>newest\r\n            to oldest</i>. Only the <i>ten</i> most recently entered messages will be viewable on the default view. All\r\n          messages can be viewed using the \"Expand\" buttom at the bottom of the log. <br></br>\r\n                    \r\n                        <b>2) Clear the existing Message Log.</b><br></br>\r\n                        Users can also clear the existing Message Log using the \"Clear Message Log\" button.<br></br>\r\n                    \r\n                        <b>3) Clear the input form.</b><br></br>\r\n                        Users can clear existing input from the form field with the \"Clear Form\" button.<br></br>\r\n                    \r\n                        <b>4) Open extended searches for text inputs on Google and Youtube.</b><br></br>\r\n                        Right-clicking on a message within the message log will open a pop-up window containing a search for that message in YouTube. Left-clicking on a message within the log will open a pop-up window containing a search for that message in Google. <br></br>\r\n                        </p>\r\n            </div>);\r\n\r\n        return (<div>\r\n            {aboutTitle}\r\n            {aboutText}\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AboutText;","export const clearMessages =() =>\r\n{\r\n    return {\r\n        type: \"CLEAR_MESSAGES\"\r\n    };\r\n}\r\n\r\nexport const addMessage = (message) =>\r\n{\r\n    return {\r\n        type: \"ADD_MESSAGE\",\r\n        payload: message\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addMessage, clearMessages } from '../actions';\r\n\r\nclass MessageForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        let newMessage = event.target.text.value.toString();\r\n        let link = event.target.link.value.toString();\r\n        if (link === \"default\"){\r\n            link = null;\r\n        }\r\n        console.log(link);\r\n        this.sendMessageWithPOST(JSON.stringify({\"message\":\r\n            newMessage,\r\n            \"link\":link}));\r\n    }\r\n\r\n    reload() {\r\n        this.props.update();\r\n    }\r\n\r\n    clearMessages() {\r\n        // make these calls asynchronous - \r\n        const options = {\r\n            method: 'DELETE'\r\n        };\r\n\r\n        fetch(\"http://localhost:9000/messages/clearAll\", options).then(response => response.json()).then(data => {\r\n            this.props.clearMessages();\r\n            console.log(data);\r\n        });\r\n    }\r\n\r\n    sendMessageWithPOST(newMessage) {\r\n    const options = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: newMessage\r\n    };\r\n\r\n    fetch(\"http://localhost:9000/messages\", options).then(response => response.json()).then(data => {\r\n        this.props.addMessage({\r\n            \"message\":data.message,\r\n            \"link\":data.link});\r\n    });\r\n}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\".form-horizontal\" onSubmit={this.handleSubmit}>\r\n                    <label className=\"input_label\">\r\n\r\n                        <input className=\"input_field\" ref={input => this.inputField = input} name=\"text\" type=\"text\" defaultValue=\"Insert Message Here...\" onFocus={() => this.inputField.value = \"\"} />\r\n                    </label>\r\n                    <br />\r\n                    <select className=\"link_select\" name=\"link\">\r\n                    <option value=\"default\" default>Link your message to...</option>\r\n    <option value=\"google\" default>Google</option>\r\n    <option value=\"youtube\">YouTube</option>\r\n    <option value=\"urbandictionary\">UrbanDictionary</option>\r\n  </select>\r\n                    <input className=\"btn btn-secondary btn-sm btn-block\" type=\"submit\" value=\"Submit\" />\r\n                    <input type=\"reset\" className=\"btn btn-secondary btn-sm btn-block\" value=\"Clear Form\" />\r\n                </form>\r\n                <div className=\"clear_button\">\r\n                    <button className=\"btn btn-secondary btn-sm btn-block\" onClick={() => this.clearMessages()}>Clear Message Log\r\n        </button>\r\n                </div>\r\n            </div>);\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { addMessage, clearMessages })(MessageForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nexport default class Messages extends React.Component {\r\n\r\n    render(){\r\n        let messageList = [];\r\n        let messagesToDisplay;\r\n        if (this.props.messages.length < this.props.numberOfMessages){\r\n            messagesToDisplay = this.props.messages.length;\r\n        } else {\r\n            messagesToDisplay = this.props.numberOfMessages;\r\n        }\r\n\r\n        if (this.props.messages.length > 0){\r\n        for (var i =0; i <messagesToDisplay; i++){\r\n            let messageObject = this.props.messages[i];\r\n            let message = messageObject.message;\r\n            let link = messageObject.link? messageObject.link.toString(): null;\r\n            let linkUrl = createLink(message, link);\r\n            if (this.props.moveMessages){\r\n                messageList.push(<li className=\"indivMessage\"\r\n                 key={i}>\r\n                 <marquee behaviour=\"alternate\" onClick={() => {window.open(linkUrl, 'popup', 'width=400,height=400' ); return false;}}> {message} </marquee>\r\n                 </li>);\r\n            } else {\r\n                messageList.push(<li key ={i} className =\"indivMessage\" onClick={() => {window.open({linkUrl}, 'popup', 'width=400,height=400'); return false;}}> {message} </li>);\r\n            }\r\n        }\r\n    }\r\n        \r\n        return messageList;\r\n\r\n    }\r\n}\r\n\r\nfunction createLink(message, linkTo){\r\n    if (linkTo === \"google\"){\r\n        return \"//\" + \"google.com/search?q=\" + message.toString();\r\n    } else if (linkTo === \"youtube\"){\r\n        return \"https://www.youtube.com/results?search_query=\" + message.toString();\r\n    } else if (linkTo === \"urbandictionary\"){\r\n        return \"https://www.urbandictionary.com/define.php?term=\" + message.toString();\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Messages from './Messages';\r\nimport { addMessage, clearMessages } from '../actions';\r\n\r\nclass MessageList extends React.Component {\r\n    \r\n    callAPI() {\r\n        // promises > timeout\r\n        fetch(\"http://localhost:9000/messages\", {\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                'Accept':'application/json'\r\n            }\r\n        }).then(response => response.json()).then(data => {\r\n            for (let i = data.length-1; i >=0; i--){\r\n                let link = data[i].link ? data[i].link.toString(): null;\r\n                this.props.addMessage(({\"message\":data[i].message.toString(),\r\n                \"link\":link}));\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.callAPI();\r\n    }\r\n\r\n    getLinkedMessages(){\r\n        document.getElementById(\"toggleLinkButton\").value=\"Show All\";\r\n        fetch(\"http://localhost:9000/messages/withLinks\", {\r\n            headers: {\r\n                'Content-Type':'application/json',\r\n                'Accept':'application/json'\r\n            }\r\n        }).then(response => response.json()).then(data => {\r\n            console.log(data);\r\n            this.props.clearMessages();\r\n            for (let i = data.length-1; i >=0; i--){\r\n                this.props.addMessage(({\"message\":data[i].message.toString(),\r\n                \"link\":data[i].link.toString()}));\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const header = (<h3 className=\"message_log_title\"> Message Log</h3>);\r\n        return (<div>\r\n            {header}\r\n            <button id=\"toggleLinkButton\" className=\"btn btn-secondary btn-sm\" onClick={() => this.getLinkedMessages()}>Show Only Messages With Links</button>\r\n            <ul className =\"message_list\">\r\n                <Messages messages={this.props.messages} numberOfMessages={this.props.numberOfMessages} moveMessages={this.props.scrollingMessages} />\r\n            </ul>\r\n        </div>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messages\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { addMessage, clearMessages })(MessageList);\r\n","import React from 'react';\r\nimport MessageForm from './MessageForm';\r\nimport MessageList from './MessageList';\r\n\r\nexport default class MessagesPage extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            numberOfMessagesDisplayed: 10,\r\n            scrollingMessages: true,\r\n            rerenderMessageList: false\r\n        };\r\n        this._collapseMessages = this._collapseMessages.bind(this);\r\n        this._expandMessages = this._expandMessages.bind(this);\r\n        this._toggleScroll = this._toggleScroll.bind(this);\r\n    }\r\n\r\n    rerenderMessageList(){\r\n        let state = this.state.rerenderMessageList;\r\n        this.setState({rerenderMessageList: !state});\r\n        console.log(\"nooo\");\r\n    }\r\n\r\n    _collapseMessages() {\r\n        this.setState({ numberOfMessagesDisplayed: 10 });\r\n    }\r\n\r\n    _expandMessages() {\r\n        this.setState({ numberOfMessagesDisplayed: 50 });\r\n    }\r\n\r\n    _toggleScroll() {\r\n        if (this.state.scrollingMessages){\r\n        this.setState({ scrollingMessages: false });\r\n        } else {\r\n            this.setState({ scrollingMessages: true });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let scrollButton;\r\n\r\n        if (this.state.scrollingMessages){\r\n            scrollButton = (<button id=\"stop_movement\" className=\"btn btn-secondary btn-sm\" onClick={this._toggleScroll}> Stop Scroll\r\n            </button>);\r\n        } else {\r\n            scrollButton = (<button id=\"stop_movement\" className=\"btn btn-secondary btn-sm\" onClick={this._toggleScroll}> Resume Scroll\r\n            </button>);\r\n        }\r\n\r\n        let expandCollapseButton;\r\n        if (this.state.numberOfMessagesDisplayed === 10){\r\n            expandCollapseButton = (<button id=\"expand_button\" className=\"btn btn-secondary btn-sm\" onClick={this._expandMessages}> Expand</button>);\r\n        } else {\r\n            expandCollapseButton = (<button id=\"collapse_button\" className=\"btn btn-secondary btn-sm\" onClick={this._collapseMessages}> Collapse</button>);\r\n        }\r\n        \r\n        return (<div>\r\n            <MessageForm update={() => this.rerenderMessageList()}/>\r\n            <hr></hr>\r\n            <MessageList update={() => this.rerenderMessageList()} numberOfMessages={this.state.numberOfMessagesDisplayed} scrollingMessages={this.state.scrollingMessages} />\r\n            <div>\r\n                {scrollButton}\r\n                {expandCollapseButton}\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport AboutText from './AboutText';\r\nimport MessagesPage from './MessagesPage';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport default class App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isHomePage: true,\r\n        entered: false};\r\n        this._updateHomePage = this._updateHomePage.bind(this);\r\n        this._updateAboutPage = this._updateAboutPage.bind(this);\r\n    }\r\n\r\n    _updateHomePage = () => {\r\n        this.setState({ isHomePage: true });\r\n    }\r\n\r\n    _updateAboutPage = () => {\r\n        this.setState({ isHomePage: false });\r\n    }\r\n\r\n    renderPage() {\r\n        let customHeader = (\r\n            <div>\r\n                <header>\r\n                    <nav>\r\n                        <span><button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick={this._updateHomePage}>HOME</button>|<button type=\"button\" className=\"btn btn-secondary btn-sm\"  onClick={this._updateAboutPage}>ABOUT</button></span>\r\n                    </nav>\r\n                </header>\r\n                <hr></hr>\r\n            </div>\r\n        );\r\n\r\n        let body;\r\n\r\n        if (this.state) {\r\n            if (this.state.isHomePage === false) {\r\n                body = (<div><AboutText /></div>);\r\n            } else {\r\n\r\n                body = (<div>\r\n                    <MessagesPage />\r\n                </div>);\r\n            }\r\n        } else {\r\n            body = (<div>\r\n                <MessagesPage />\r\n            </div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>{customHeader}</div>\r\n                <div>{body}</div>\r\n            </div>\r\n            \r\n        );\r\n\r\n    }\r\n\r\n    renderWelcome(){\r\n        return (<div className=\"welcomeContainer\">\r\n            <div className=\"welcomeInfo\">\r\n            <h1 className=\"website_title\">CPSC436I Message Logger</h1>\r\n            <h4 className=\"website_info\">Developed by Martin Palanca as part of the Introduction to Industry Skills (CPSC436I) course at the University of British Columbia</h4>\r\n            <button className=\"enter_button\" onClick={() => this.enterSite()}>Start</button>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    enterSite(){\r\n        this.setState({entered:true});\r\n    }\r\n\r\n    render(){\r\n        if (this.state.entered === true){\r\n            return <div className=\"container\">{this.renderPage()}</div>;\r\n        } else {\r\n            return <div className=\"container\">{this.renderWelcome()}</div>;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nlet defaults = [];\r\n\r\nconst messagesReducer = (messages= defaults, action) => {\r\n    if (action.type === \"CLEAR_MESSAGES\"){\r\n        return [];\r\n    } else if (action.type === \"ADD_MESSAGE\"){\r\n        let newArray = [action.payload];\r\n        return newArray.concat(messages);\r\n    }\r\n    return messages;\r\n};\r\n\r\n\r\nexport default combineReducers({\r\n    messages: messagesReducer,\r\n})\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from './reducers';\r\nimport { createStore } from 'redux';\r\n\r\nReactDOM.render(\r\n    (<Provider store={createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() )}>\r\n        <App/ >\r\n    </Provider>),\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}